// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.IO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

#nullable disable

namespace UniHotel___BackEnd
{
    public partial class Context_UniHotel_Dev : DbContext
    {
        public Context_UniHotel_Dev()
        {
        }

        public Context_UniHotel_Dev(DbContextOptions<Context_UniHotel_Dev> options)
            : base(options)
        {
        }

        public virtual DbSet<ADM_Hotel> ADM_Hotel { get; set; }
        public virtual DbSet<Acomodacoes> Acomodacoes { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<Compras> Compras { get; set; }
        public virtual DbSet<Contabilidade> Contabilidade { get; set; }
        public virtual DbSet<Contas_Pagar> Contas_Pagar { get; set; }
        public virtual DbSet<Contas_Receber> Contas_Receber { get; set; }
        public virtual DbSet<Dados_Financeiros_Clientes> Dados_Financeiros_Clientes { get; set; }
        public virtual DbSet<Fornecedores_Hotel> Fornecedores_Hotel { get; set; }
        public virtual DbSet<Funcionarios> Funcionarios { get; set; }
        public virtual DbSet<Hospedagens> Hospedagens { get; set; }
        public virtual DbSet<RH> RH { get; set; }
        public virtual DbSet<Users_Clientes> Users_Clientes { get; set; }
        public virtual DbSet<Users_Funcionarios> Users_Funcionarios { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //Configuração da connection string:
            /*
            var builder = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json");
            var configuration = builder.Build();
            optionsBuilder.UseSqlServer(configuration["ConnectionString:DB_UniHotel_Dev"]);
            */

            ///*
            if (!optionsBuilder.IsConfigured)
            {
                //Configuração da connection string:
                var builder = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json");
                var configuration = builder.Build();
                //String de conexão sendo passada como variável:
                optionsBuilder.UseSqlServer(configuration["ConnectionString:DB_UniHotel_Dev"]);
            }
            //*/

            /*
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Server=tcp:unihotel-db.database.windows.net,1433;Initial Catalog=UniHotel_Desenvolvimento;Persist Security Info=False;User ID=gabriel0598;Password={Alfa_2033*};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;");
            }
            */
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<ADM_Hotel>(entity =>
            {
                entity.HasKey(e => e.CNPJ)
                    .HasName("PK__ADM_Hote__AA57D6B5651BA48B");

                entity.Property(e => e.CNPJ).ValueGeneratedNever();

                entity.Property(e => e.Bairro_Regiao).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Email_Principal).IsUnicode(false);

                entity.Property(e => e.Estado_Provincia).IsUnicode(false);

                entity.Property(e => e.Logradouro).IsUnicode(false);

                entity.Property(e => e.Nome_Fantasia).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.Razao_Social).IsUnicode(false);
            });

            modelBuilder.Entity<Acomodacoes>(entity =>
            {
                entity.HasKey(e => e.ID_Acomod)
                    .HasName("Pk_ID_Acomod");

                entity.Property(e => e.Categoria).IsUnicode(false);

                entity.Property(e => e.Nivel).IsUnicode(false);

                entity.Property(e => e.Num_Ap).IsUnicode(false);

                entity.Property(e => e.Tipo_Acomodacao).IsUnicode(false);
            });

            modelBuilder.Entity<Clientes>(entity =>
            {
                entity.HasKey(e => e.Cod_Cliente)
                    .HasName("PK__Clientes__4418E2075AA66C0F");

                entity.Property(e => e.Bairro_Regiao).IsUnicode(false);

                entity.Property(e => e.CEP_ZipCode).IsUnicode(false);

                entity.Property(e => e.CPF).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Email_Principal).IsUnicode(false);

                entity.Property(e => e.Email_Secundario).IsUnicode(false);

                entity.Property(e => e.Estado_Provincia).IsUnicode(false);

                entity.Property(e => e.Genero).IsUnicode(false);

                entity.Property(e => e.Logradouro).IsUnicode(false);

                entity.Property(e => e.Nome_Completo).IsUnicode(false);

                entity.Property(e => e.Num_Passaporte).IsUnicode(false);

                entity.Property(e => e.Num_Tel_Celular).IsUnicode(false);

                entity.Property(e => e.Num_Tel_Comercial).IsUnicode(false);

                entity.Property(e => e.Num_Tel_Fixo).IsUnicode(false);

                entity.Property(e => e.Num_Tel_Recado).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RG).IsUnicode(false);
            });

            modelBuilder.Entity<Compras>(entity =>
            {
                entity.HasKey(e => e.Num_Pedido)
                    .HasName("PK__Compras__6A7B03B3A10F98E5");

                entity.Property(e => e.Num_Pedido).IsUnicode(false);

                entity.Property(e => e.Cod_Item).IsUnicode(false);

                entity.Property(e => e.Cond_Pagamento).IsUnicode(false);

                entity.Property(e => e.Descricao).IsUnicode(false);

                entity.Property(e => e.Fornecedor).IsUnicode(false);

                entity.Property(e => e.Tipo_Frete)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Unid_Medida).IsUnicode(false);

                entity.HasOne(d => d.Cod_FornecNavigation)
                    .WithMany(p => p.Compras)
                    .HasForeignKey(d => d.Cod_Fornec)
                    .HasConstraintName("FK_CNPJ_Forn");
            });

            modelBuilder.Entity<Contabilidade>(entity =>
            {
                entity.HasKey(e => e.CC_Contabil)
                    .HasName("PK__Contabil__AD39DA4F4E908664");

                entity.Property(e => e.Descr_CC).IsUnicode(false);

                entity.Property(e => e.Historico).IsUnicode(false);

                entity.Property(e => e.Pedido_Compra).IsUnicode(false);

                entity.Property(e => e.Tipo_Doc_OP).IsUnicode(false);

                entity.HasOne(d => d.Pedido_CompraNavigation)
                    .WithMany(p => p.Contabilidade)
                    .HasForeignKey(d => d.Pedido_Compra)
                    .HasConstraintName("FK_ID_PedidoCompra");

                entity.HasOne(d => d.Reserva_HospedagemNavigation)
                    .WithMany(p => p.Contabilidade)
                    .HasForeignKey(d => d.Reserva_Hospedagem)
                    .HasConstraintName("FK_Cod_Reserva");
            });

            modelBuilder.Entity<Contas_Pagar>(entity =>
            {
                entity.HasKey(e => e.Ordem_Pgto)
                    .HasName("PK__Contas_P__2E0482734AB87DF9");

                entity.Property(e => e.Ordem_Pgto).ValueGeneratedNever();

                entity.Property(e => e.Banco).IsUnicode(false);

                entity.Property(e => e.Cod_PedidoCompra).IsUnicode(false);

                entity.Property(e => e.Descricao_Pgto).IsUnicode(false);

                entity.Property(e => e.Natureza_Pgto).IsUnicode(false);

                entity.Property(e => e.Observacao_Pgto).IsUnicode(false);

                entity.Property(e => e.Razao_Social).IsUnicode(false);

                entity.Property(e => e.Tipo_Pgto).IsUnicode(false);

                entity.HasOne(d => d.Cod_PedidoCompraNavigation)
                    .WithMany(p => p.Contas_Pagar)
                    .HasForeignKey(d => d.Cod_PedidoCompra)
                    .HasConstraintName("FK_Pgto_Compra");
            });

            modelBuilder.Entity<Contas_Receber>(entity =>
            {
                entity.HasKey(e => e.Ordem_Recebimento)
                    .HasName("PK__Contas_R__6BC21F1CE15F4350");

                entity.Property(e => e.Ordem_Recebimento).ValueGeneratedNever();

                entity.Property(e => e.Banco).IsUnicode(false);

                entity.Property(e => e.Descricao_Cred).IsUnicode(false);

                entity.Property(e => e.Natureza_Cred).IsUnicode(false);

                entity.Property(e => e.Nome_Razao_Social).IsUnicode(false);

                entity.Property(e => e.Observacao_Cred).IsUnicode(false);

                entity.Property(e => e.Tipo_Doc).IsUnicode(false);

                entity.HasOne(d => d.ID_ReservaNavigation)
                    .WithMany(p => p.Contas_Receber)
                    .HasForeignKey(d => d.ID_Reserva)
                    .HasConstraintName("FK_ID_Reserva");
            });

            modelBuilder.Entity<Dados_Financeiros_Clientes>(entity =>
            {
                entity.HasKey(e => e.ID_Cartao)
                    .HasName("PK__Dados_Fi__E005FBFF9FF63EE5");

                entity.Property(e => e.Banco_Adm1).IsUnicode(false);

                entity.Property(e => e.Banco_Adm2).IsUnicode(false);

                entity.Property(e => e.Banco_Adm3).IsUnicode(false);

                entity.Property(e => e.Bandeira1).IsUnicode(false);

                entity.Property(e => e.Bandeira2).IsUnicode(false);

                entity.Property(e => e.Bandeira3).IsUnicode(false);

                entity.Property(e => e.CVV1).IsUnicode(false);

                entity.Property(e => e.CVV2).IsUnicode(false);

                entity.Property(e => e.CVV3).IsUnicode(false);

                entity.Property(e => e.Num_Cartao1).IsUnicode(false);

                entity.Property(e => e.Num_Cartao2).IsUnicode(false);

                entity.Property(e => e.Num_Cartao3).IsUnicode(false);

                entity.Property(e => e.Tipo1).IsUnicode(false);

                entity.Property(e => e.Tipo2).IsUnicode(false);

                entity.Property(e => e.Tipo3).IsUnicode(false);

                entity.HasOne(d => d.Cod_ClienteNavigation)
                    .WithMany(p => p.Dados_Financeiros_Clientes)
                    .HasForeignKey(d => d.Cod_Cliente)
                    .HasConstraintName("FK_Cod_Cliente");
            });

            modelBuilder.Entity<Fornecedores_Hotel>(entity =>
            {
                entity.HasKey(e => e.CNPJ)
                    .HasName("PK__Forneced__AA57D6B59DEB8EE4");

                entity.Property(e => e.CNPJ).ValueGeneratedNever();

                entity.Property(e => e.Bairro_Regiao).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Cod_Fornec).ValueGeneratedOnAdd();

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Estado_Provincia).IsUnicode(false);

                entity.Property(e => e.Funcionario_Contato).IsUnicode(false);

                entity.Property(e => e.Logradouro).IsUnicode(false);

                entity.Property(e => e.Nome_Fantasia).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.Razao_Social).IsUnicode(false);
            });

            modelBuilder.Entity<Funcionarios>(entity =>
            {
                entity.HasKey(e => e.Cod_Funcionario)
                    .HasName("PK__Funciona__578982C2B4538D2B");

                entity.Property(e => e.Bairro_Regiao).IsUnicode(false);

                entity.Property(e => e.CPF).IsUnicode(false);

                entity.Property(e => e.Cargo).IsUnicode(false);

                entity.Property(e => e.Cep_ZipCode).IsUnicode(false);

                entity.Property(e => e.Cidade).IsUnicode(false);

                entity.Property(e => e.Complemento).IsUnicode(false);

                entity.Property(e => e.Curso).IsUnicode(false);

                entity.Property(e => e.Email_Corporativo).IsUnicode(false);

                entity.Property(e => e.Email_Principal).IsUnicode(false);

                entity.Property(e => e.Email_Secundario).IsUnicode(false);

                entity.Property(e => e.Estado_Civil).IsUnicode(false);

                entity.Property(e => e.Estado_Provincia).IsUnicode(false);

                entity.Property(e => e.Genero).IsUnicode(false);

                entity.Property(e => e.Instituicao).IsUnicode(false);

                entity.Property(e => e.Logradouro).IsUnicode(false);

                entity.Property(e => e.Nivel).IsUnicode(false);

                entity.Property(e => e.Nivel_Formacao).IsUnicode(false);

                entity.Property(e => e.Nome_Completo).IsUnicode(false);

                entity.Property(e => e.Num_CTPS).IsUnicode(false);

                entity.Property(e => e.Num_Passaporte).IsUnicode(false);

                entity.Property(e => e.Num_Reservista).IsUnicode(false);

                entity.Property(e => e.Num_Tel_Celular).IsUnicode(false);

                entity.Property(e => e.Num_Tel_Fixo).IsUnicode(false);

                entity.Property(e => e.Num_Tel_Recado).IsUnicode(false);

                entity.Property(e => e.Num_Titulo_Eleitor).IsUnicode(false);

                entity.Property(e => e.Numero).IsUnicode(false);

                entity.Property(e => e.PIS).IsUnicode(false);

                entity.Property(e => e.Pais).IsUnicode(false);

                entity.Property(e => e.RG).IsUnicode(false);

                entity.Property(e => e.RNE).IsUnicode(false);

                entity.Property(e => e.RegistCivil_Mat).IsUnicode(false);

                entity.Property(e => e.RegistCivil_UF)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Situac_Formacao).IsUnicode(false);

                entity.Property(e => e.Tipo_Contrato).IsUnicode(false);

                entity.Property(e => e.UF_CTPS)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UF_RG)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.UF_Titulo_Eleitor)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Hospedagens>(entity =>
            {
                entity.HasKey(e => e.Cod_Reserva)
                    .HasName("PK__Hospedag__3564433CC5145E1A");

                entity.Property(e => e.Acompanhante1).IsUnicode(false);

                entity.Property(e => e.Acompanhante2).IsUnicode(false);

                entity.Property(e => e.Acompanhante3).IsUnicode(false);

                entity.Property(e => e.Acompanhante4).IsUnicode(false);

                entity.Property(e => e.Acompanhante5).IsUnicode(false);

                entity.Property(e => e.CPF_Acomp1).IsUnicode(false);

                entity.Property(e => e.CPF_Acomp2).IsUnicode(false);

                entity.Property(e => e.CPF_Acomp3).IsUnicode(false);

                entity.Property(e => e.CPF_Acomp4).IsUnicode(false);

                entity.Property(e => e.CPF_Acomp5).IsUnicode(false);

                entity.Property(e => e.CPF_Hospede).IsUnicode(false);

                entity.Property(e => e.CPF_Tomador).IsUnicode(false);

                entity.Property(e => e.Cod_Verif).IsUnicode(false);

                entity.Property(e => e.ID_Checkin).IsUnicode(false);

                entity.Property(e => e.ID_Checkout).IsUnicode(false);

                entity.Property(e => e.Mat_Func_Checkin).IsUnicode(false);

                entity.Property(e => e.Mat_Func_Checkout).IsUnicode(false);

                entity.Property(e => e.Nome_Hospede).IsUnicode(false);

                entity.Property(e => e.Nome_Tomador).IsUnicode(false);

                entity.Property(e => e.Observacoes).IsUnicode(false);

                entity.Property(e => e.Passap_Acomp1).IsUnicode(false);

                entity.Property(e => e.Passap_Acomp2).IsUnicode(false);

                entity.Property(e => e.Passap_Acomp3).IsUnicode(false);

                entity.Property(e => e.Passap_Acomp4).IsUnicode(false);

                entity.Property(e => e.Passap_Acomp5).IsUnicode(false);

                entity.Property(e => e.Passaporte_Hospede).IsUnicode(false);

                entity.Property(e => e.Razao_Social).IsUnicode(false);

                entity.Property(e => e.Tipo_Pgto).IsUnicode(false);

                entity.HasOne(d => d.CNPJ_PrestadorNavigation)
                    .WithMany(p => p.Hospedagens)
                    .HasForeignKey(d => d.CNPJ_Prestador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CNPJ_Hotel");

                entity.HasOne(d => d.Cod_ClienteNavigation)
                    .WithMany(p => p.Hospedagens)
                    .HasForeignKey(d => d.Cod_Cliente)
                    .HasConstraintName("FK__Hospedage__Cod_C__0C85DE4D");

                entity.HasOne(d => d.Mat_Func_ReservaNavigation)
                    .WithMany(p => p.Hospedagens)
                    .HasForeignKey(d => d.Mat_Func_Reserva)
                    .HasConstraintName("FK_ID_Funcionario");

                entity.HasOne(d => d.Num_ApNavigation)
                    .WithMany(p => p.Hospedagens)
                    .HasForeignKey(d => d.Num_Ap)
                    .HasConstraintName("FK_ID_Quarto");
            });

            modelBuilder.Entity<RH>(entity =>
            {
                entity.HasKey(e => e.Matricula)
                    .HasName("PK__RH__0FB9FB4E4D2F75F3");

                entity.Property(e => e.Cargo).IsUnicode(false);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.HasOne(d => d.Cod_FuncionarioNavigation)
                    .WithMany(p => p.RH)
                    .HasForeignKey(d => d.Cod_Funcionario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CodFuncionario");
            });

            modelBuilder.Entity<Users_Clientes>(entity =>
            {
                entity.HasKey(e => e.ID_User)
                    .HasName("PK__Usuarios__ED4DE4429F507D29");

                entity.Property(e => e.Email_Login).IsUnicode(false);

                entity.Property(e => e.Senha).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.HasOne(d => d.Cod_ClienteNavigation)
                    .WithMany(p => p.Users_Clientes)
                    .HasForeignKey(d => d.Cod_Cliente)
                    .HasConstraintName("fk_ClienteLogin");
            });

            modelBuilder.Entity<Users_Funcionarios>(entity =>
            {
                entity.HasKey(e => e.ID_User)
                    .HasName("PK__Users_Fu__ED4DE44255E03B3E");

                entity.Property(e => e.Matricula).IsUnicode(false);

                entity.Property(e => e.Senha).IsUnicode(false);

                entity.Property(e => e.UserName).IsUnicode(false);

                entity.HasOne(d => d.Cod_FuncionarioNavigation)
                    .WithMany(p => p.Users_Funcionarios)
                    .HasForeignKey(d => d.Cod_Funcionario)
                    .HasConstraintName("fk_FuncLogin");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}